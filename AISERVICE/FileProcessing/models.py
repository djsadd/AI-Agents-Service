from django.db import models
from projects.models import Project
from django.contrib.postgres.fields import ArrayField

from services.utils.extract import extract_text
from services.utils.splitter import split_text
from services.embeddings.encode import get_embeddings
from services.qdrant.uploader import upload_to_qdrant

# Create your models here.


class Document(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('ready', 'Ready'),
        ('error', 'Error'),
    ]

    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="documents")
    file = models.FileField(upload_to='documents/')
    original_filename = models.CharField(max_length=255)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    error_message = models.TextField(blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.original_filename

    def process(self):

        try:
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {self.original_filename}")
            self.status = 'processing'
            self.save()

            # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            print("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
            text = extract_text(self.file.path)
            if not text.strip():
                raise ValueError("–ò–∑–≤–ª–µ—á—ë–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")

            # 2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
            print("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏")
            chunks = split_text(text)

            # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤")
            chunk_objs = []
            for idx, chunk_text in enumerate(chunks):
                chunk_objs.append(Chunk(document=self, text=chunk_text, chunk_index=idx))
            Chunk.objects.bulk_create(chunk_objs)
            print(chunk_objs)
            # 4. –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
            print("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏")
            created_chunks = self.chunks.order_by("chunk_index").all()
            chunk_texts = [ch.text for ch in created_chunks]
            embeddings = get_embeddings(chunk_texts)

            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            for chunk, vector in zip(created_chunks, embeddings):
                Embedding.objects.create(chunk=chunk, vector=vector)

            # 6. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Qdrant
            print("–ó–∞–≥—Ä—É–∑–∫–∞ –≤ Qdrant")

            upload_to_qdrant(embeddings, chunk_texts, file_id=str(self.id))

            self.status = 'ready'
            self.error_message = ''
            self.save()
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        except Exception as e:
            self.status = 'error'
            self.error_message = str(e)
            self.save()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")


class Chunk(models.Model):
    document = models.ForeignKey(Document, on_delete=models.CASCADE, related_name='chunks')
    text = models.TextField()
    chunk_index = models.PositiveIntegerField()

    def __str__(self):
        return f"Chunk {self.chunk_index} of {self.document.original_filename}"


class Embedding(models.Model):
    chunk = models.OneToOneField(Chunk, on_delete=models.CASCADE, related_name='embedding')
    vector = ArrayField(models.FloatField(), size=768)  # –ò–ª–∏ 1536 –¥–ª—è OpenAI, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏

    def __str__(self):
        return f"Embedding for chunk {self.chunk.id}"
